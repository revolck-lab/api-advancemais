import app from './app';
import { PrismaClient } from '@prisma/client';

/**
 * Classe Server respons√°vel pela inicializa√ß√£o do servidor
 */
class Server {
  private port: number;
  private prisma: PrismaClient;
  private isDbConnected: boolean = false;
  private maxRetries: number = 5;
  private retryDelay: number = 3000; // 3 segundos

  /**
   * Inicializa a classe Server com a porta configurada
   */
  constructor() {
    this.port = parseInt(process.env.PORT || '3000', 10);
    this.prisma = app.prisma;
  }

  /**
   * Testa a conex√£o com o banco de dados com tentativas de reconex√£o
   */
  private async testDatabaseConnection(retryCount: number = 0): Promise<boolean> {
    try {
      // Executa uma query simples para testar a conex√£o
      await this.prisma.$queryRaw`SELECT 1`;
      console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso');
      this.isDbConnected = true;
      return true;
    } catch (error: any) {
      const dbName = this.extractDatabaseNameFromUrl();
      const errorMessage = error.message || 'Erro desconhecido';
      
      console.error(`‚ùå Falha ao conectar com o banco de dados (${dbName}):`, errorMessage);
      
      // Verificar se √© um erro de permiss√£o
      if (errorMessage.includes('denied access') || errorMessage.includes('Access denied')) {
        console.error('üîë ERRO DE PERMISS√ÉO: O usu√°rio n√£o tem acesso ao banco de dados.');
        console.error('üí° Verifique se o usu√°rio existe e possui as permiss√µes necess√°rias no banco de dados.');
        
        // Tentativa de diagn√≥stico adicional
        this.logConnectionTroubleshooting(dbName);
        
        // Se for um erro de permiss√£o, n√£o fazer retry
        return false;
      }
      
      // Implementar retry com backoff exponencial
      if (retryCount < this.maxRetries) {
        const nextDelay = this.retryDelay * Math.pow(1.5, retryCount);
        console.log(`‚è±Ô∏è Tentando reconectar em ${nextDelay / 1000} segundos (tentativa ${retryCount + 1}/${this.maxRetries})...`);
        
        await new Promise(resolve => setTimeout(resolve, nextDelay));
        return await this.testDatabaseConnection(retryCount + 1);
      }
      
      console.error('‚ùå Esgotadas todas as tentativas de conex√£o com o banco de dados.');
      return false;
    }
  }
  
  /**
   * Extrai o nome do banco de dados da URL de conex√£o 
   */
  private extractDatabaseNameFromUrl(): string {
    try {
      const dbUrl = process.env.DATABASE_URL || '';
      // Use regex para extrair o nome do banco ap√≥s a √∫ltima barra
      const matches = dbUrl.match(/\/([^\/\?]+)(\?|$)/);
      return matches && matches[1] ? matches[1] : 'desconhecido';
    } catch (error) {
      return 'desconhecido';
    }
  }
  
  /**
   * Registra informa√ß√µes adicionais para troubleshooting
   */
  private logConnectionTroubleshooting(dbName: string): void {
    console.log('\nüìã GUIA DE TROUBLESHOOTING DO BANCO DE DADOS:');
    console.log('1Ô∏è‚É£ Verifique se a vari√°vel DATABASE_URL est√° configurada corretamente no ambiente');
    console.log(`2Ô∏è‚É£ Confirme que o banco de dados '${dbName}' existe`);
    console.log('3Ô∏è‚É£ Verifique se o usu√°rio no DATABASE_URL tem acesso ao banco de dados');
    console.log('4Ô∏è‚É£ Para MySQL/MariaDB, execute: GRANT ALL PRIVILEGES ON `' + dbName + '`.* TO \'seu_usuario\'@\'%\';');
    console.log('5Ô∏è‚É£ Confirme que o host do banco de dados permite conex√µes do Render');
    console.log('6Ô∏è‚É£ Se estiver usando um banco de dados gerenciado, verifique as regras de firewall\n');
  }

  /**
   * Inicializa o servidor HTTP e estabelece conex√£o com o banco de dados
   */
  public async start(): Promise<void> {
    try {
      // Tenta conectar ao banco de dados
      const dbConnected = await this.testDatabaseConnection();
      
      // Inicia o servidor HTTP mesmo que o banco de dados n√£o esteja dispon√≠vel
      app.app.listen(this.port, () => {
        console.log(`
        üöÄ Servidor iniciado ${!dbConnected ? 'em MODO LIMITADO (sem banco de dados)' : 'com sucesso'}!
        üåê API dispon√≠vel em: http://localhost:${this.port}
        ‚öôÔ∏è Ambiente: ${process.env.NODE_ENV || 'development'}
        ${dbConnected ? 'üóÑÔ∏è Banco de dados: Conectado' : '‚ö†Ô∏è Banco de dados: N√ÉO CONECTADO - Apenas endpoints sem depend√™ncia de DB funcionar√£o'}
        `);
      });
      
      // Registra o status do banco no app para uso pelos controllers
      app.setDatabaseStatus(dbConnected);

      // Configura tratamento de sinais para encerramento gracioso
      this.setupGracefulShutdown();
    } catch (error) {
      console.error('‚ùå Falha ao iniciar o servidor:', error);
      process.exit(1);
    }
  }

  /**
   * Configura o encerramento gracioso do servidor
   */
  private setupGracefulShutdown(): void {
    const signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
    
    signals.forEach(signal => {
      process.on(signal, async () => {
        console.log(`\nüõë Recebido sinal ${signal}, encerrando servidor...`);
        
        try {
          // Fecha a conex√£o do Prisma apenas se estiver conectado
          if (this.isDbConnected) {
            await this.prisma.$disconnect();
            console.log('‚úÖ Conex√£o com o banco de dados encerrada');
          }
          
          // Encerra o processo com sucesso
          process.exit(0);
        } catch (error) {
          console.error('‚ùå Erro ao encerrar conex√µes:', error);
          process.exit(1);
        }
      });
    });
  }
}

// Inicializa e executa o servidor
const server = new Server();
server.start().catch(error => {
  console.error('‚ùå Erro fatal ao iniciar o servidor:', error);
  process.exit(1);
});

// Tratamento de exce√ß√µes n√£o capturadas
process.on('uncaughtException', (error) => {
  console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
});

process.on('unhandledRejection', (reason) => {
  console.error('‚ùå Promessa rejeitada n√£o tratada:', reason);
});