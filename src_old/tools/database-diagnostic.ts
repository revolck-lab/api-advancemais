import dotenv from 'dotenv';
import mysql from 'mysql2/promise';
import { parseConnectionString } from './utils';

// Carrega vari√°veis de ambiente
dotenv.config();

/**
 * Script de diagn√≥stico de problemas de conex√£o com o banco de dados MySQL
 * Executar com: npx ts-node -r tsconfig-paths/register src/tools/database-diagnostic.ts
 */
async function diagnoseDatabase() {
  console.log('üîç Iniciando diagn√≥stico da conex√£o de banco de dados...\n');
  
  // Verificar se DATABASE_URL est√° configurada
  const dbUrl = process.env.DATABASE_URL;
  if (!dbUrl) {
    console.error('‚ùå Vari√°vel DATABASE_URL n√£o est√° definida!');
    console.log('üí° SOLU√á√ÉO: Configure a vari√°vel DATABASE_URL no arquivo .env ou no painel de vari√°veis de ambiente do Render.');
    return;
  }
  
  console.log('‚úÖ Vari√°vel DATABASE_URL est√° configurada');
  
  // Parsear a string de conex√£o
  try {
    const connectionConfig = parseConnectionString(dbUrl);
    console.log(`üìä Informa√ß√µes da conex√£o:`);
    console.log(`   - Host: ${connectionConfig.host}`);
    console.log(`   - Porta: ${connectionConfig.port}`);
    console.log(`   - Banco: ${connectionConfig.database}`);
    console.log(`   - Usu√°rio: ${connectionConfig.user}`);
    console.log(`   - Senha: ${'*'.repeat(connectionConfig.password.length)}`);
    
    // Tentar conectar sem especificar o banco de dados (apenas ao servidor)
    console.log('\nüîÑ Tentando conectar ao servidor MySQL...');
    
    try {
      const connection = await mysql.createConnection({
        host: connectionConfig.host,
        port: connectionConfig.port,
        user: connectionConfig.user,
        password: connectionConfig.password,
        // N√£o incluir o database para testar apenas a conex√£o com o servidor
      });
      
      console.log('‚úÖ Conex√£o com o servidor MySQL estabelecida com sucesso!');
      
      // Verificar se o banco de dados existe
      console.log(`\nüîÑ Verificando se o banco de dados '${connectionConfig.database}' existe...`);
      const [rows] = await connection.query(
        `SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = ?`,
        [connectionConfig.database]
      );
      
      const dbExists = Array.isArray(rows) && rows.length > 0;
      
      if (dbExists) {
        console.log(`‚úÖ Banco de dados '${connectionConfig.database}' existe`);
      } else {
        console.error(`‚ùå Banco de dados '${connectionConfig.database}' N√ÉO existe!`);
        console.log(`üí° SOLU√á√ÉO: Crie o banco de dados com o comando: CREATE DATABASE \`${connectionConfig.database}\`;`);
        
        // Perguntar se deseja criar o banco de dados
        console.log('\n‚ö†Ô∏è Deseja criar o banco de dados agora? (sim/n√£o)');
        const readline = require('readline').createInterface({
          input: process.stdin,
          output: process.stdout
        });
        
        readline.question('> ', async (answer: string) => {
          if (answer.toLowerCase() === 'sim' || answer.toLowerCase() === 's') {
            try {
              await connection.query(`CREATE DATABASE \`${connectionConfig.database}\``);
              console.log(`‚úÖ Banco de dados '${connectionConfig.database}' criado com sucesso!`);
            } catch (error: any) {
              console.error(`‚ùå Erro ao criar banco de dados: ${error.message}`);
            }
          }
          
          readline.close();
          await connection.end();
        });
        
        return;
      }
      
      // Verificar permiss√µes do usu√°rio
      console.log(`\nüîÑ Verificando permiss√µes do usu√°rio '${connectionConfig.user}'...`);
      
      try {
        // Tentar conectar ao banco de dados espec√≠fico
        const dbConnection = await mysql.createConnection({
          host: connectionConfig.host,
          port: connectionConfig.port,
          user: connectionConfig.user,
          password: connectionConfig.password,
          database: connectionConfig.database,
        });
        
        // Tentar executar uma query simples
        await dbConnection.query('SELECT 1');
        console.log(`‚úÖ Usu√°rio '${connectionConfig.user}' tem permiss√£o para acessar o banco de dados '${connectionConfig.database}'`);
        
        // Verificar permiss√µes espec√≠ficas
        const [grantRows] = await connection.query(
          `SHOW GRANTS FOR ?@?`,
          [`${connectionConfig.user}`, `%`]
        );
        
        console.log('\nüìã Permiss√µes do usu√°rio:');
        (grantRows as any[]).forEach((row: any) => {
          const grantStr = Object.values(row)[0] as string;
          console.log(`   - ${grantStr}`);
        });
        
        await dbConnection.end();
      } catch (error: any) {
        console.error(`‚ùå Erro de permiss√£o: ${error.message}`);
        console.log(`üí° SOLU√á√ÉO: Execute o seguinte comando no MySQL como administrador:`);
        console.log(`   GRANT ALL PRIVILEGES ON \`${connectionConfig.database}\`.* TO '${connectionConfig.user}'@'%';`);
        console.log(`   FLUSH PRIVILEGES;`);
        
        // Perguntar se deseja conceder as permiss√µes
        console.log('\n‚ö†Ô∏è Deseja tentar conceder as permiss√µes agora? (sim/n√£o)');
        const readline = require('readline').createInterface({
          input: process.stdin,
          output: process.stdout
        });
        
        readline.question('> ', async (answer: string) => {
          if (answer.toLowerCase() === 'sim' || answer.toLowerCase() === 's') {
            try {
              await connection.query(`GRANT ALL PRIVILEGES ON \`${connectionConfig.database}\`.* TO '${connectionConfig.user}'@'%'`);
              await connection.query('FLUSH PRIVILEGES');
              console.log(`‚úÖ Permiss√µes concedidas com sucesso!`);
            } catch (error: any) {
              console.error(`‚ùå Erro ao conceder permiss√µes: ${error.message}`);
            }
          }
          
          readline.close();
          await connection.end();
        });
        
        return;
      }
      
      await connection.end();
      console.log('\n‚úÖ Diagn√≥stico conclu√≠do! A conex√£o com o banco de dados deve funcionar corretamente.');
      
    } catch (error: any) {
      console.error(`‚ùå Falha ao conectar ao servidor MySQL: ${error.message}`);
      
      if (error.message.includes('Access denied')) {
        console.log('üí° CAUSA: Credenciais inv√°lidas (usu√°rio ou senha incorretos)');
        console.log('üí° SOLU√á√ÉO: Verifique o usu√°rio e senha no DATABASE_URL');
      } else if (error.message.includes('ECONNREFUSED')) {
        console.log('üí° CAUSA: N√£o foi poss√≠vel conectar ao host do banco de dados');
        console.log('üí° SOLU√á√ÉO:');
        console.log('  1. Verifique se o endere√ßo do host est√° correto');
        console.log('  2. Verifique se a porta est√° correta (padr√£o MySQL: 3306)');
        console.log('  3. Para bancos de dados em cloud, verifique se o IP do Render est√° liberado no firewall');
      } else {
        console.log(`üí° CAUSA DESCONHECIDA: ${error.message}`);
      }
    }
    
  } catch (error: any) {
    console.error(`‚ùå Erro ao analisar a string de conex√£o: ${error.message}`);
    console.log('üí° SOLU√á√ÉO: Verifique o formato da string DATABASE_URL');
    console.log('   Formato esperado: mysql://usuario:senha@host:porta/banco');
  }
}

// Executa o diagn√≥stico
diagnoseDatabase();